[paths]
train = null
test = null
dev = null
vectors = null
init_tok2vec = null
base_model = "grc_odycy_joint_sm"

[system]
gpu_allocator = null
seed = 0

[nlp]
lang = "grc"
pipeline = ["tok2vec","tagger","morphologizer","parser","trainable_lemmatizer","frequency_lemmatizer","ner"]
batch_size = 1000
disabled = []
before_creation = null
after_creation = null
after_pipeline_creation = null
tokenizer = {"@tokenizers":"spacy.Tokenizer.v1"}

[components]

[components.tok2vec]
factory = "tok2vec"

[components.tok2vec.model]
@architectures = "spacy.Tok2Vec.v2"

[components.tok2vec.model.embed]
@architectures = "spacy.MultiHashEmbed.v2"
width = ${components.tok2vec.model.encode.width}
attrs = ["NORM","PREFIX","SUFFIX","SHAPE"]
rows = [5000,1000,2500,2500]
include_static_vectors = false

[components.tok2vec.model.encode]
@architectures = "spacy.MaxoutWindowEncoder.v2"
width = 96
depth = 4
window_size = 1
maxout_pieces = 3

[components.tagger]
source = ${paths:base_model}

[components.morphologizer]
source = ${paths:base_model}

[components.parser]
source = ${paths:base_model}

[components.trainable_lemmatizer]
source = ${paths:base_model}

[components.frequency_lemmatizer]
source = ${paths:base_model}

[components.ner]
factory = "ner"

[components.ner.model]
@architectures = "spacy.TransitionBasedParser.v2"
state_type = "ner"
extra_state_tokens = false
hidden_width = 64
maxout_pieces = 2
use_upper = true
nO = null

[components.ner.model.tok2vec]
@architectures = "spacy.Tok2VecListener.v1"
width = ${components.tok2vec.model.encode.width}

[corpora]

[corpora.dev]
@readers = "spacy.Corpus.v1"
path = ${paths.dev}
max_length = 0
gold_preproc = false
limit = 0
augmenter = null

[corpora.train]
@readers = "spacy.Corpus.v1"
path = ${paths.train}
max_length = 0
gold_preproc = false
limit = 0
augmenter = null

[training]
accumulate_gradient = 1
dev_corpus = "corpora.dev"
train_corpus = "corpora.train"
seed = ${system.seed}
gpu_allocator = ${system.gpu_allocator}
dropout = 0.1
patience = 1600
max_epochs = 0
max_steps = 20000
eval_frequency = 200
frozen_components = []
annotating_components = []
before_to_disk = null
before_update = null

[training.batcher]
@batchers = "spacy.batch_by_words.v1"
discard_oversize = false
tolerance = 0.2
get_length = null

[training.batcher.size]
@schedules = "compounding.v1"
start = 100
stop = 1000
compound = 1.001
t = 0.0

[training.logger]
@loggers = "spacy.WandbLogger.v3"
project_name = "homerCy"

[training.optimizer]
@optimizers = "Adam.v1"
beta1 = 0.9
beta2 = 0.999
L2_is_weight_decay = true
L2 = 0.01
grad_clip = 1.0
use_averages = false
eps = 0.00000001
learn_rate = 0.001

[training.score_weights]
tag_acc = 0.26
pos_acc = 0.12
morph_acc = 0.12
morph_per_feat = null
lemma_acc = 0.5
dep_uas = 0.12
dep_las = 0.12
dep_las_per_type = null
ents_f = 0.5
ents_p = 0.0
ents_r = 0.12
ents_per_type = null

[pretraining]

[initialize]
vectors = ${paths.vectors}
init_tok2vec = ${paths.init_tok2vec}
vocab_data = null
lookups = null
before_init = null
after_init = null

[initialize.components]

[initialize.tokenizer]

[initialize.components.frequency_lemmatizer]

[initialize.components.frequency_lemmatizer.lookup]
@readers = "srsly.read_json.v1"
path = "assets/lemmas/lemma_lookup.json"

[initialize.components.frequency_lemmatizer.table]
@readers = "srsly.read_jsonl.v1"
path = "assets/lemmas/lemma_table.jsonl"
skip = false